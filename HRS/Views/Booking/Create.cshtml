@model HRS.Models.Booking

@{
    ViewBag.Title = "New booking";
}

<h3>@ViewBag.Title</h3>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    <section>
        @Html.ValidationSummary(true)

        <h4>Client</h4>
        <h5>
            @Ajax.ActionLink("New client", "CreateClient", "Booking",
                new AjaxOptions { HttpMethod = "Get", InsertionMode = InsertionMode.Replace, UpdateTargetId = "clientDialog" },
                new { id = "opener" })
        </h5>

        @{ Html.EnableClientValidation(false); }
        @Html.HiddenFor(model => model.ClientID, new { id = "ClientID", @class = "client-group" })
        @{ Html.EnableClientValidation(true); }
        @Html.TextBoxFor(model => model.ClientName, new { id = "ClientName", @class = "form-control" })
        @Html.ValidationMessageFor(model => model.ClientID)

        @Html.HiddenFor(model => model.Status)
        <hr />
        <h4>Room items</h4>
        <table id="RoomItems" class="table-list">
            <thead>
                <tr>
                    <th>Label</th>
                    <th>Check-in</th>
                    <th>Check-out</th>
                    <th>Room Type</th>
                    <th>Room</th>
                    <th>Price</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < Model.RoomItemList.Count; i++)
                {
                    <tr>
                        <td>
                            @Html.TextBoxFor(model => model.RoomItemList[i].Label,
                                new { @class = "form-control small", Value = "Room " + (i + 1) })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.RoomItemList[i].From, new { id = "From" + i, onchange = "getAvailability(" + i + ")" })
                        </td>
                        <td>
                            @Html.EditorFor(model => model.RoomItemList[i].To, new { id = "To" + i, onchange = "getAvailability(" + i + ")" })
                        </td>
                        <td>
                            @Html.DropDownListFor(model => model.RoomItemList[i].RoomTypeID,
                                new SelectList(ViewBag.RoomTypes, "ID", "Name", Model.RoomItemList[i].RoomTypeID),
                                "-- Choose --",
                                new
                                {
                                    @class = "form-control form-control-dropdown",
                                    id = "RoomType" + i,
                                    onchange = "getAvailability(" + i + ")"
                                })
                        </td>
                        <td>
                            <span id="Availability@(i)">@ViewBag.Availability[i]</span> available
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.RoomItemList[i].Price, new { @class = "form-control price",
                                Value = (Model.RoomItemList[i].Price != 0 ? Model.RoomItemList[i].Price.ToString() : "0.00"),
                                id = "Price" + i, onchange = "updateBookingPrice()"})
                        </td>
                        <td>
                            <input type="submit" name="Delete" value="Delete" class="btn btn-default" onclick="setIndex(@i)"
                                    formnovalidate="formnovalidate" />
                        </td>
                        <td>
                            @Html.HiddenFor(model => model.RoomItemList[i].Status)
                            @Html.ValidationMessageFor(model => model.RoomItemList[i].RoomTypeID)
                            @Html.ValidationMessageFor(model => model.RoomItemList[i].From)
                            @Html.ValidationMessageFor(model => model.RoomItemList[i].To)
                            @Html.ValidationMessageFor(model => model.RoomItemList[i].Price)
                        </td>
                    </tr>
                }
            </tbody>
            <tfoot>
                <tr>
                    <td colspan="8">
                        <b>Total Price:</b> <span id="BookingPrice">@Model.Price.ToString("N2")</span>
                    </td>
                </tr>
            </tfoot>
        </table>
        <input type="hidden" id="index" name="index" value="" />
        <input type="hidden" id="itemCount" value="@Model.RoomItemList.Count" />
        <hr/>
        <div class="form-group">
            <input type="submit" name="AddItem" value="Add item" class="btn btn-default" />
            <input type="submit" name="Create" value="Continue" class="btn btn-default" />
        </div>
</section>
}

<div id="clientDialog" class="dialog"></div>

@section Scripts
{
    <script>
        function setIndex(index) {
            $("#index").val(index);
        }

        $.validator.addMethod("clientGroup",
            function () { return ($('#ClientID').val() != '' && $('#ClientName').val() != ''); },
            "The Client field is required.");

        $.validator.addClassRules("client-group", {
            clientGroup: true
        });

        $("#ClientName").autocomplete({
            source: '@Url.Action("GetClient")',
            select: function (event, ui) {
                $("#ClientID").val(ui.item.id)
                var elem = $('.input-validation-error').filter('#ClientID');
                if (elem.length > 0) {
                    elem.valid();
                }
            }
        });

        $("#clientDialog").dialog({
            autoOpen: false,
            modal: true,
            closeOnEscape: false,
            title: "New client",
            minWidth: 500,
            position: { my: "center", at: "top", of: window },
            close: function (event, ui) {
                $("#clientDialog").html('');
            }
        });

        $("#opener").click(function (event) {
            $("#clientDialog").dialog("open");
        });

        function toggle(obj)
        {
            if (obj.checked) {
                $('#company').css('display', 'block');
                $('#person').css('display', 'none');
            } else {
                $('#company').css('display', 'none');
                $('#person').css('display', 'block');
            }
        }

        function updateBookingPrice() {
            var count = $('#itemCount').val();
            var sum = 0;
            for (var i = 0; i < count; i++) {
                var price = parseFloat($('#Price' + i).val());
                if (!isNaN(price)) {
                    sum += price;
                }
            }
            $('#BookingPrice').html(sum.toFixed(2));
        }

        function getAvailability(index) {
            var rt = $('#RoomType' + index);    // Room Type
            var cin = $('#From' + index);       // Check-in
            var cout = $('#To' + index);        // Check-out

            if (cin.valid() && cout.valid() && rt.val() != '') {
                $.ajax({
                    dataType: 'json',
                    type: 'POST',
                    async: false,
                    data: { id: rt.val(), index: index, from: cin.val(), to: cout.val() },
                    url: '@Url.Action("GetAvailability")',
                    success: function (response) {
                        var elem = $('#Availability' + response.Index);
                        elem.html(response.Availability);
                        elem = $('#Price' + response.Index);
                        elem.val(response.Price);
                        updateBookingPrice();
                    }
                });
            }
        }
    </script>
}
